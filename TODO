Features
--------
[ ] Line visibilities
[ ] Update mark positions for every delete and insertion.
[ ] Positioning. Figure out how the column position is determined after
    vertical movements and especially characterwise yanks and such. Other
    situations: backspacing into previous lines. Maybe create a
    Positioning.js module with methods like
  
    var col = getColumnPosition({
        startCol : Number
        motionResult : {
            motionName : String,
            type : 'characterwise' | 'linewise',
            inclusive : Boolean
            ...
        }
    });
[ ] b motion
[ ] gg motion
[ ] G motion
[ ] / forward search
[ ] ? backward search
[ ] n motion
[ ] N motion
[ ] DELETE functionality in NORMAL, and CMDLINE
[ ] Support combined execute commands. E.g., wq.

[X] INSERT mode (no control chars)
[X] I, a, A INSERT mode transition types
[X] f motion
[X] t motion
[X] F motion
[X] T motion
[X] Deletes
[X] Puts
[X] :reg
[X] NORMAL mode ARROW keys
[X] Handle <CR> sequences in the macro query parameter.
[X] DELETE functionality in INSERT
[X] w motion
[X] INSERT mode control characters
[X] } motion
[X] { motion

Code Maintenance
----------------
[ ] Create map of error codes and messages (e.g., E20 => Mark not set)
[ ] Remove Positioning module since its only used in one spot.
[ ] Create colorscheme module so we don't have to use magic strings
[ ] Create MotionResult object that automatically handles the updating of
    higherPosition.row, higherPosition.col variables. Do we even need those?

Performance
-----------
[ ] Re-render only this lines which have changed.

Bugs
----
[ ] Handle cases where Buffer is entirely empty. This is partially handled
    in NormalHandler and Motions at least spits out a warning for now.
[ ] Change empty lines to blank spaces only when the cursor is over them.
    When the cursor leaves, change the line contents back to the empty
    string (currently they are left as a single space). To reproduce edit a
    file with a blank line. "j" movement down to the line, then "k" away
    from it. Line contents will remain a single space, even after "k"-ing
    away.
[ ] Deleting all characters from a line. When there are no characters to the
    right of the cursor, pressing DELETE will delete backwwards instead of
    sucking up the characters from the next line.
[ ] {count}f{letter} should be aborted if there aren't {count} letters
    available on the line. Currently it just goes to the last found letter.
[ ] Delete operations involving paragraph movements { or } should end with
    the cursor at the beginning of a single blank line.

[X] Sometimes {count} values get mixed up. To reproduce:
        y4j => Yanks 5 lines (expected)
        4yj => Yanks 5 lines in register r (expected)
        "ry4j => Yanks 5 lines in register r (expected)
        "r4yj => Yanks 17 lines into register r (unexpected)
