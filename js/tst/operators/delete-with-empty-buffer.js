// Generated by CoffeeScript 1.8.0
(function() {
  describe('Deletions with empty buffer', function() {
    var vim;
    vim = new Vim();
    beforeEach(function() {
      return vim.reset();
    });
    describe('When buffer is []', function() {
      it('dd when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('d');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dh when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('h');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dj when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('j');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dk when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('k');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dl when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('l');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('d0 when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('0');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('d$ when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('$');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dG when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('G');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dw when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('w');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('d} when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('}');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      return it('d{ when buffer is []', function() {
        vim.get('buffer').set({
          lines: []
        });
        vim.receiveKey('d');
        vim.receiveKey('{');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
    });
    return describe('When buffer is [""]', function() {
      it('dd when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('d');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(0);
      });
      it('dh when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('h');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('dj when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('j');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('dk when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('k');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('dl when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('l');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('d0 when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('0');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('d$ when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('$');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('dG when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('G');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('dw when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('w');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      it('d} when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('}');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
      return it('d{ when buffer is [""]', function() {
        vim.get('buffer').set({
          lines: [""]
        });
        vim.receiveKey('d');
        vim.receiveKey('{');
        expect(vim.get('row')).to.be(0);
        expect(vim.get('col')).to.be(0);
        return expect(vim.get('buffer').get('lines').length).to.be(1);
      });
    });
  });

}).call(this);
